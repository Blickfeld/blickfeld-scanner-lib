syntax = "proto2";
option cc_enable_arenas = true;

import "blickfeld/options.proto";
import "blickfeld/config/algorithm.proto";
import "blickfeld/data/frame.proto";
import "blickfeld/config/scan_pattern.proto";

package blickfeld.protocol.stream;

/**
 * This section describes the different streams to which it is possible to subscribe.
 * A stream regularly provides data or status updates for the user. The events will not be pushed automatically to the BSL; the client has to retrieve them.
 */
message Subscribe {
	/**
	 * This request is used for subscribing to a point cloud stream.
	 */
	message PointCloud {
		optional data.Frame reference_frame = 1 [(optional)=true, (allow_sparse)=true]; // <blockquote>Introduced in BSL v2.10 and firmware v1.9</blockquote> If present, only fields that are set in this message and submessages will be present in the point cloud. If less fields are requested, the Protobuf encoding and network transport time can reduce significantly.
		optional config.ScanPattern.Filter filter = 2; // <blockquote>Introduced in BSL v2.10 and firmware v1.9</blockquote> Refer to [ScanPattern.Filter](#blickfeld.protocol.config.ScanPattern.Filter). Overrides parameters of scan pattern.

		repeated config.Algorithm algorithms = 3; // <blockquote>Introduced in BSL v2.17 and firmware v1.16</blockquote> Refer to [config.Algorithm](#blickfeld.protocol.config.Algorithm). Sets algorithms, which are initialized, configured for the stream and are executed on each frame in the post-processing on the device.
		optional bool prepend_advanced_config_algorithms = 4 [default = true]; // <blockquote>Introduced in BSL v2.17 and firmware v1.16</blockquote> With the server.default_point_cloud_subscription algorithms can be persisted on the device and they are by default prepended to the list of sent algorithms in the subscribe request. This behaviour can be disabled with this field to e.g. disable or overwrite all algorithms.
	}

	/**
	 * This request is used for subscribing to a status stream.
	 */
	message Status {
	}

	/**
	 * > Introduced in BSL v2.13 and firmware v1.13
	 *
	 * This request is used for subscribing to a raw file stream.
	 * The requested stream is directly packed in the Blickfeld data format and only raw bytes are sent to the client, which it should write sequentially in a file.
	 * An [Unsubscribe](#blickfeld.protocol.stream.Unsubscribe) request with the same request data must be sent to properly end the file stream.
	 * The request raw file stream is ended with an [EndOfStream](#blickfeld.protocol.stream.Event.EndOfStream) event.
	 */
	message RawFile {
		oneof data {
			PointCloud point_cloud = 1;  // Subscribe to a raw point cloud stream. Refer to [Subscribe.PointCloud](#blickfeld.protocol.stream.Subscribe.PointCloud).
		}
	}

	/**
	 * > Introduced in BSL v2.18 and firmware v1.19
	 *
	 * The Cube has an on-board IMU, which can be used for e.g. mapping applications or static auto-leveling.
	 * A stream can be requested with this subscription.
	 * The default rate is approx. 1.125 kHz and is provided in bursts.
	 * The timestamps inside the protocol are synchronized to the ones in point cloud frames.
	 */
	message IMU {
		optional bool packed_format = 1 [ default = false ]; // Request a packed binary format. This is currently used for efficent Python numpy decoding.
	}

	/**
	 * Internal use only
	 */
	message Developer {
		extensions 1 to max;  // Internal developer requests
		option (secure) = {permissions: DEVELOPER, cert_type: CLIENT};
	}

	/**
	 * You can subscribe to one of the streams.
	 */
	oneof data {
		PointCloud point_cloud = 11;  // Refer to [Subscribe.PointCloud](#blickfeld.protocol.stream.Subscribe.PointCloud)
		Status status = 12;  // Refer to [Subscribe.Status](#blickfeld.protocol.stream.Subscribe.Status)
		Developer developer = 13;  // Refer to [Subscribe.Developer](#blickfeld.protocol.stream.Subscribe.Developer)
		RawFile raw_file = 14; // Refer to [Subscribe.RawFile](#blickfeld.protocol.stream.Subscribe.RawFile)
		IMU imu = 16; // <blockquote>Introduced in BSL v2.18 and firmware v1.19</blockquote> Refer to [Subscribe.IMU](#blickfeld.protocol.stream.Subscribe.IMU)
	}
}
