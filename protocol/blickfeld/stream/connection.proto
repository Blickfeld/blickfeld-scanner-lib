syntax = "proto2";
option cc_enable_arenas = true;

import "blickfeld/options.proto";
import "blickfeld/data/frame.proto";
import "blickfeld/config/scan_pattern.proto";

package blickfeld.protocol.stream;

/**
 * This section describes the different streams to which it is possible to subscribe.
 * A stream regularly provides data or status updates for the user. The events will not be pushed automatically to the BSL; the client has to retrieve them.
 */
message Subscribe {
	/**
	 * This request is used for subscribing to a point cloud stream.
	 */
	message PointCloud {
		optional data.Frame reference_frame = 1 [(optional)=true, (allow_sparse)=true]; // <blockquote>Introduced in BSL v2.10 and firmware v1.9</blockquote> If present, only fields that are set in this message and submessages will be present in the point cloud. If less fields are requested, the Protobuf encoding and network transport time can reduce significantly.
		optional config.ScanPattern.Filter filter = 2; // <blockquote>Introduced in BSL v2.10 and firmware v1.9</blockquote> Refer to [ScanPattern.Filter](#blickfeld.protocol.config.ScanPattern.Filter). Overrides parameters of scan pattern.
		extensions 3; // Internal developer configuration
	}

	/**
	 * This request is used for subscribing to a status stream.
	 */
	message Status {
	}

	/**
	 * > Introduced in BSL v2.13 and firmware v1.13
	 *
	 * This request is used for subscribing to a raw file stream.
	 * The requested stream is directly packed in the Blickfeld data format and only raw bytes are sent to the client, which it should write sequentially in a file.
	 * An [Unsubscribe](#blickfeld.protocol.stream.Unsubscribe) request with the same request data must be sent to properly end the file stream.
	 * The request raw file stream is ended with an [EndOfStream](#blickfeld.protocol.stream.Event.EndOfStream) event.
	 */
	message RawFile {
		oneof data {
			PointCloud point_cloud = 1;  // Subscribe to a raw point cloud stream. Refer to [Subscribe.PointCloud](#blickfeld.protocol.stream.Subscribe.PointCloud).
		}
	}

	/**
	 * Internal use only
	 */
	message Developer {
		extensions 1 to max;  // Internal developer requests
		option (secure) = {permissions: DEVELOPER, cert_type: CLIENT};
	}

	/**
	 * You can subscribe to one of the streams.
	 */
	oneof data {
		PointCloud point_cloud = 11;  // Refer to [Subscribe.PointCloud](#blickfeld.protocol.stream.Subscribe.PointCloud)
		Status status = 12;  // Refer to [Subscribe.Status](#blickfeld.protocol.stream.Subscribe.Status)
		Developer developer = 13;  // Refer to [Subscribe.Developer](#blickfeld.protocol.stream.Subscribe.Developer)
		RawFile raw_file = 14; // Refer to [Subscribe.RawFile](#blickfeld.protocol.stream.Subscribe.RawFile)
	}
}
