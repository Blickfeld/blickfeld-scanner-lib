syntax = "proto2";
option cc_enable_arenas = true;

import "blickfeld/common.proto";
import "blickfeld/options.proto";
import "blickfeld/data/point_cloud.proto";
import "blickfeld/data/frame.proto";
import "blickfeld/status/main.proto";

package blickfeld.protocol.stream;


/**
 * This section describes the different streams to which it is possible to subscribe.
 * A stream regularly provides data or status updates for the user. The events will not be pushed automatically to the BSL; the client has to retrieve them.
 */
message Subscribe {
	/**
	 * This request is used for subscribing to a point cloud stream.
	 */
	message PointCloud {
		/**
		 * > Introduced in BSL v2.10 and firmware v1.9
		 *
		 * Filter points and returns by point attributes during the post-processing on the device.
		 * This can be used to e.g. filter points with low intensity or to enable secondary returns.
		 */
		message Filter {
			optional uint32 max_number_of_returns_per_point = 1 [default = 1]; // Set maximum number of returns per point. By default, secondary returns are disabled. Set this, e.g. to 2, to enable secondary returns.
			optional OptionalValueRange intensity = 2; // Filter all points, which intensity values are not within this value range.
			optional OptionalValueRange ambient_light_level = 3; // Filter all points, which ambient light level values are not within this value range.
			optional OptionalValueRange range = 4; // Filter all points, which range values are not within this value range.
		}

		optional data.Frame reference_frame = 1 [(optional)=true, (allow_sparse)=true]; // <blockquote>Introduced in BSL v2.10 and firmware v1.9</blockquote> If present, only fields that are set in this message and submessages will be present in the point cloud. If less fields are requested, the Protobuf encoding and network transport time can reduce significantly.
		optional Filter filter = 2; // <blockquote>Introduced in BSL v2.10 and firmware v1.9</blockquote> Refer to [PointCloud.Filter](#blickfeld.protocol.stream.Subscribe.PointCloud.Filter)
	}

	/**
	 * This request is used for subscribing to a status stream.
	 */
	message Status {
	}

	/**
	 * Internal use only
	 */
	message Developer {
		extensions 1 to max;  // Internal developer requests
		option (secure) = {permissions: DEVELOPER, cert_type: CLIENT};
	}

	/**
	 * You can subscribe to one of the streams.
	 */
	oneof data {
		PointCloud point_cloud = 11;  // Refer to [Subscribe.PointCloud](#blickfeld.protocol.stream.Subscribe.PointCloud)
		Status status = 12;  // Refer to [Subscribe.Status](#blickfeld.protocol.stream.Subscribe.Status)
		Developer developer = 13;  // Refer to [Subscribe.Developer](#blickfeld.protocol.stream.Subscribe.Developer)
	}
}

/**
 * This section describes the events of streams.
 */
message Event {

	/**
	 * Internal use only
	 */
	message Developer {
		extensions 1 to max;  // Internal developer events
	}

	oneof data {
		option (optional_one_of) = true;
		data.PointCloud point_cloud = 11;  // Refer to [PointCloud](#blickfeld.protocol.data.PointCloud)
		Status status = 12;  // Refer to [Status](#blickfeld.protocol.status.Status)
		Developer developer = 13;  // Refer to [Event.Developer](#blickfeld.protocol.stream.Event.Developer)
	}
}
