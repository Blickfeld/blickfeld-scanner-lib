syntax = "proto2";

import "blickfeld/options.proto";

package blickfeld.protocol.config;

/**
 * The scan pattern defines the movement of the mirrors.
 * The key parameters of the pattern are the horizontal and vertical fields of view (FoV) as well as the number of scan lines per frame.
 * The frame rate is defined by the total number of scan lines and the oscillation frequency of the mirrors which is fixed and device-spcific.
 *
 * For a more detailed explanation, see: [Scan Pattern documentation](Scan_Pattern)
 */
message ScanPattern {

	/**
	 * This section defines the movement of the horizontal mirror.
	 * The mirror moves continuously with its own frequency. Each half-oscillation period of the mirror results in one scan line.
	 */
	message Horizontal {

		/**
		 * Unit: [rad]  
		 * –
		 * optical field of view of the horizontal mirror. 
		 * Note: In v2.2* and below, this was defined as a mechanical FoV.
		 */
		optional float fov = 1;
	}
	
	/**
	 * This section defines the movement of the vertical mirror within one frame.
	 * The mirror moves for from 0 degrees to the configured target FoV (up-ramping phase) and back to 0 degrees (down-ramping phase) with its eigenfrequency.
	 * The number of scanlines for each phase can be configured.
	 * Due to the dynamics of the mirror, a certain number of scan lines are required to reach the target FoV and then to reach 0 degrees again.
	 * Consequently, if the limit is reached, a lower number of scan lines requires a reduced FoV.
	 * Thus, a higher number of scan lines allows a larger vertical FoV. The vertical FoV is limited by the optical components.
	 *
	 * Note: Due to the time required for one scan line, the rounded even number of scan lines directly scales inverse proportionally with65t the frame rate.
	 *
	 * For a more detailed explanation, see: [Scan Pattern documentation](Scan_Pattern)
	 */
	message Vertical {

		/**
		 * Unit: [rad]
		 * –
		 * FoV in the center of the frame.
		 * Due to the eye shape of the scan pattern, the vertical FoV decreases the outer boundaries of the horizontal mirror.
		 */
		optional float fov = 1;

		/**
		 * Configures the number of scan lines required for the up-ramping phase.
		 * During the up-ramping phase, the vertical mirror increases its amplitude from 0 degrees to the target FoV. Default: 200
		 */
		optional uint32 scanlines_up = 2 [default = 200, (d_min) = 1];

		/**
		 * Configures the amount of scan lines required for the down-ramping phase.
		 * During the down-ramping phase, the vertical mirror decreases its amplitude from the target FoV to 0 degrees. Default: 30
		 */
		optional uint32 scanlines_down = 3 [default = 30, (d_min) = 1];
	}
	
	/**
	 * This section defines the pattern in which the laser pulses and captures sample points
	 */
	message Pulse {
		reserved "padding";

		/**
		 * The device pulses depending on the mirror positioning.
		 * Currently, only pulse triggering on the horizontal angle is supported.
		 * The laser pulses are emittet with the configured angular spacing.
		 */
		enum Type {
		    EQUI_HORIZONTAL_ANGLE = 0; // The laser is triggered depending on the horizontal angle of the laser beam.
		    EQUI_DENSITY = 1; // Reserved for future use. Not yet supported.
		}
		
		/**
		 * Because of the mirrors oscillating and the resulting Lissajous curve, it is not possible to pulse in a completely arbitrary pattern.
		 * A frame always starts with a phase in which the vertical mirror increases its amplitude (up-ramping).
		 * It is followed by a second phase, in which it decreases its amplitude until it no longer moves (down-ramping).
		 * It is possible to pulse in both phases. There are four different options to pulse:
		 */
		enum FrameMode {
		    NONE = 0;
			
		    /**
			 * The device pulses in the up-ramping and down-ramping phases and one frame is created by combining the resulting sample points.
			*/
		    COMBINE_UP_DOWN = 1;
			
		    /**
			 * The device pulses in the **up-ramping** phase and **does not** pulse in the **down-ramping** phase.
			 */
		    ONLY_UP = 2;
			
		    /**
			 * The device is **does not** pulse in the **up-ramping** phase and pulses in the **down-ramping** phase.
			 */
		    ONLY_DOWN = 3;
			
		    /**
			 * The device pulses in the up-ramping and down-ramping phases and one frame for each phase is created.
			 */
			SEPARATE = 4;
		}

		extensions 1; // Deprecated key 'padding'. [ScanPattern.Horizontal.fov](#blickfeld.protocol.config.ScanPattern.Horizontal.fov) now sets the optical horizontal field of view.

		/**
		 * Unit: [rad]
		 * –
		 * this defines the angle within which the horizontal mirror moves between two laser pulses.
		 * This parameter therefore defines the horizontal sampling resolution.
		 */
		optional float angle_spacing = 2;
		optional Type type = 3 [default = EQUI_HORIZONTAL_ANGLE];  // Refer to [ScanPattern.Pulse.Type](#blickfeld.protocol.config.ScanPattern.Pulse.Type)
		optional FrameMode frame_mode = 4 [default = ONLY_UP];  // Refer to [ScanPattern.Pulse.FrameMode](#blickfeld.protocol.config.ScanPattern.Pulse.FrameMode)
		/**
		 * This parameter defines whether the distortion correction is applied when calculating the laser pulse angles. Default: True
		 */
		optional bool distortion_correction = 5 [default = true];
		extensions 6; // Developer
	}
	
	/**
	 * This section defines the target frame rate for synchronization between several LiDAR devices.
	 * The feature is described in the [Time synchronization documentation](Sync).
	 */
	message FrameRate {
		optional double target = 1 [(optional) = true]; // Target frame rate during synchronization between several LiDAR devices
		optional double maximum = 2 [(optional) = true]; // Read-only parameter for maximum achievable frame rate.

		/**
		 * In [s]. Adds a constant value to the Unix reference time, starting from 00:00:00 UTC on January 1, 1970.
		 * It can be used to compensate delays or to interleave LiDAR devices. Default: 0
		 */
		optional double reference_time_offset = 3 [default = 0];
	}

	optional Horizontal horizontal = 1; // Refer to [ScanPattern.Horizontal](#blickfeld.protocol.config.ScanPattern.Horizontal)
	optional Vertical vertical = 2; // Refer to [ScanPattern.Vertical](#blickfeld.protocol.config.ScanPattern.Vertical)
	optional Pulse pulse = 3; // Refer to [ScanPattern.Pulse](#blickfeld.protocol.config.ScanPattern.Pulse)
	optional FrameRate frame_rate = 4; // Refer to [ScanPattern.FrameRate](#blickfeld.protocol.config.ScanPattern.FrameRate)
	extensions 5; // Developer
	extensions 6; // Developer

}
