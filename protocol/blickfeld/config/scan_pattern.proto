syntax = "proto2";

import "blickfeld/common.proto";
import "blickfeld/options.proto";

package blickfeld.protocol.config;

/**
 * The scan pattern defines the movement of the mirrors.
 * The key parameters of the pattern are the horizontal and vertical fields of view (FoV) as well as the number of scan lines per frame.
 * The frame rate is defined by the total number of scan lines and the oscillation frequency of the mirrors which is fixed and device-spcific.
 *
 * For a more detailed explanation, see: [Scan Pattern documentation](Scan_Pattern)
 */
message ScanPattern {

	/**
	 * This section defines the movement of the horizontal mirror.
	 * The mirror moves continuously with its own frequency. Each half-oscillation period of the mirror results in one scan line.
	 */
	message Horizontal {

		/**
		 * Unit: [rad]
		 * –
		 * optical field of view of the horizontal mirror.
		 * Note: In v2.2* and below, this was defined as a mechanical FoV.
		 */
		optional float fov = 1 [(unit) = "rad", (ui_unit) = "deg", (ui_scale) = 57.295779513, (ui_decimal_places) = 2];
	}

	/**
	 * This section defines the movement of the vertical mirror within one frame.
	 * The mirror moves for from 0 degrees to the configured target FoV (up-ramping phase) and back to 0 degrees (down-ramping phase) with its eigenfrequency.
	 * The number of scanlines for each phase can be configured.
	 * Due to the dynamics of the mirror, a certain number of scan lines are required to reach the target FoV and then to reach 0 degrees again.
	 * Consequently, if the limit is reached, a lower number of scan lines requires a reduced FoV.
	 * Thus, a higher number of scan lines allows a larger vertical FoV. The vertical FoV is limited by the optical components.
	 *
	 * Note: Due to the time required for one scan line, the rounded even number of scan lines directly scales inverse proportionally with65t the frame rate.
	 *
	 * For a more detailed explanation, see: [Scan Pattern documentation](Scan_Pattern)
	 */
	message Vertical {

		/**
		 * Unit: [rad]
		 * –
		 * FoV in the center of the frame.
		 * Due to the eye shape of the scan pattern, the vertical FoV decreases the outer boundaries of the horizontal mirror.
		 */
		optional float fov = 1 [(unit) = "rad", (ui_unit) = "deg", (ui_scale) = 57.295779513, (ui_decimal_places) = 2];

		/**
		 * Configures the number of scan lines required for the up-ramping phase.
		 * During the up-ramping phase, the vertical mirror increases its amplitude from 0 degrees to the target FoV. Default: 200
		 */
		optional uint32 scanlines_up = 2 [default = 40, (d_min) = 1];

		/**
		 * Configures the amount of scan lines required for the down-ramping phase.
		 * During the down-ramping phase, the vertical mirror decreases its amplitude from the target FoV to 0 degrees. Default: 30
		 */
		optional uint32 scanlines_down = 3 [default = 40, (d_min) = 1];
	}

	/**
	 * This section defines the pattern in which the laser pulses and captures sample points
	 */
	message Pulse {
		reserved "padding";

		/**
		 * The device pulses depending on the mirror positioning.
		 * Currently, only pulse triggering on the horizontal angle is supported.
		 * The laser pulses are emittet with the configured angular spacing.
		 */
		enum Type {
			EQUI_HORIZONTAL_ANGLE = 0; // The laser is triggered depending on the horizontal angle of the laser beam with the configured angle spacing.
			EQUI_DENSITY = 1; // Reserved for future use. Not yet supported.
			CUSTOM = 2; // Internal feature for custom scan patterns
			/*
			 * The laser is triggered depending on the horizontal angle of the laser beam with the configured angle spacing.
			 * Scanlines are shifted by angle_spacing/4 with alternate directions.
			 * This doubles the horizontal density with the COMBINE_UP_DOWN FrameMode and efficiently uses the down-ramp phase in the inner horizontal FoV.
			 */
			INTERLEAVE = 3;
		}

		/**
		 * Because of the mirrors oscillating and the resulting Lissajous curve, it is not possible to pulse in a completely arbitrary pattern.
		 * A frame always starts with a phase in which the vertical mirror increases its amplitude (up-ramping).
		 * It is followed by a second phase, in which it decreases its amplitude until it no longer moves (down-ramping).
		 * It is possible to pulse in both phases. There are four different options to pulse:
		 */
		enum FrameMode {
			NONE = 0;

			/**
			 * The device pulses in the up-ramping and down-ramping phases and one frame is created by combining the resulting sample points.
			 */
			COMBINE_UP_DOWN = 1;

			/**
			 * The device pulses in the **up-ramping** phase and **does not** pulse in the **down-ramping** phase.
			 */
			ONLY_UP = 2;

			/**
			 * The device is **does not** pulse in the **up-ramping** phase and pulses in the **down-ramping** phase.
			 */
			ONLY_DOWN = 3;

			/**
			 * The device pulses in the up-ramping and down-ramping phases and one frame for each phase is created.
			 */
			SEPARATE = 4;
		}

		/*
		 * > Introduced in BSL v2.15 and firmware v1.16
		 *
		 * Custom scan pattern configuration. Required for different use cases, as e.g. angle triggers, point triggers, or detector recordings.
		 */
		message Custom {
			/*
			 * List of available device triggers.
			 */
			enum Trigger {
				TRG_EXTERNAL_0 = 1; // External output pin, routed to TEST0 on the debug board.
				TRG_EXTERNAL_1 = 2; // External output pin, routed to TEST1 on the debug board.
				TRG_DETECTOR = 3; // Internal detector recording, which can retrieved with the detector stream.
				TRG_LASER = 4; // Trigger laser.
			}

			/*
			 * Specify duration for trigger type in seconds.
			 */
			message Duration {
				optional float external_0 = 1 [ default = 0.0001, (d_min) = 8e-9, (d_max) = 0.1 ]; // in [s]
				optional float external_1 = 2 [ default = 0.0001, (d_min) = 8e-9, (d_max) = 0.1 ]; // in [s]
			}

			/*
			 * Allows to trigger based on horizontal angles.
			 */
			message AngleTrigger {
				message Angle {
					optional float horizontal_angle = 1; // in [rad]
					optional uint64 scanline_id = 2 [(optional) = true];  // Define in which scanline the trigger should occur, if none is given, it will trigger in all scanlines
					repeated Trigger enabled_triggers = 3;
				}

				repeated Angle angles = 1; // List of angles
			}

			/*
			 * Set point triggers for the normal equi-distant horizontal scan pattern.
			 */
			message PointTrigger {
				message Point {
					optional uint64 id = 1;  // Define which point ID should be triggered
					repeated Trigger enabled_triggers = 2;
				}

				repeated Point points = 1;
			}

			oneof custom_type {
				AngleTrigger angle_trigger = 1;
				PointTrigger point_trigger = 2;
			}

			optional Duration duration = 3;
		}

		/**
		 * Unit: [rad]
		 * –
		 * This defines the angle within which the horizontal mirror moves between two laser pulses.
		 * This parameter therefore defines the horizontal sampling resolution.
		 */
		optional float angle_spacing = 2 [(unit) = "rad", (ui_unit) = "deg", (ui_scale) = 57.295779513, (ui_decimal_places) = 2];
		optional Type type = 3 [default = INTERLEAVE];  // Refer to [ScanPattern.Pulse.Type](#blickfeld.protocol.config.ScanPattern.Pulse.Type)
		optional FrameMode frame_mode = 4 [default = COMBINE_UP_DOWN];  // Refer to [ScanPattern.Pulse.FrameMode](#blickfeld.protocol.config.ScanPattern.Pulse.FrameMode)

		/**
		 * This parameter defines whether the distortion correction is applied when calculating the laser pulse angles. Default: True
		 */
		optional bool distortion_correction = 5 [default = true];

		optional Custom custom = 8 [(optional) = true]; // <blockquote>Introduced in BSL v2.15 and firmware v1.16</blockquote> Refer to [ScanPattern.Pulse.Custom](#blickfeld.protocol.config.ScanPattern.Pulse.Custom)

		extensions 1; // Deprecated key 'padding'. [ScanPattern.Horizontal.fov](#blickfeld.protocol.config.ScanPattern.Horizontal.fov) now sets the optical horizontal field of view.
		extensions 6, 7; // Developer
	}

	/**
	 * This section defines the target frame rate for synchronization between several LiDAR devices.
	 * The feature is described in the [Time synchronization documentation](Sync).
	 */
	message FrameRate {
		optional double target = 1 [(unit) = "Hz", (ui_decimal_places) = 2, (optional) = true]; // Target frame rate during synchronization between several LiDAR devices
		optional double maximum = 2 [(unit) = "Hz", (ui_decimal_places) = 2, (optional) = true]; // Read-only parameter for maximum achievable frame rate.

		/**
		 * In [s]. Adds a constant value to the Unix reference time, starting from 00:00:00 UTC on January 1, 1970.
		 * It can be used to compensate delays or to interleave LiDAR devices. Default: 0
		 */
		optional double reference_time_offset = 3 [(unit) = "s", (ui_unit) = "ms", (ui_decimal_places) = 1, (ui_scale) = 1e-3,  default = 0];
	}

	/**
	 * > Introduced in BSL v2.10 and firmware v1.9
	 *
	 * Filter points and returns by point attributes during the post-processing on the device.
	 * This can be used to e.g. filter points with low intensity or to enable secondary returns.
	 */
	message Filter {
		/**
		 * > Introduced in BSL v2.11 and firmware v1.11
		 *
		 * This is a preliminary interface to control the noise filter on the device.
		 * All points, which have a lower intensity than the minimum intensity calculated by this filter will be filtered out.
		 *
		 * > Changed in firmware v1.15. Please re-adjust filter configurations in scan patterns.
		 *
		 * The internal algorithm implements a non-linear function, which describes the noise level for different ambient light levels.
		 * The function can be scaled with the gain and shifted with the offset.
		 *
		 * > Before firmware v1.15
		 *
		 * The formula is: minimum_intensity = offset + gain * point.ambient_light_level,
		 * where the point.ambient_light_level is the ambient light level of the point the laser shoots at.
		 */
		message Noise {
			optional uint32 offset = 1 [ (d_min) = 0, (d_max) = 50 ]; // Can be seen as minimum intensity filter, if there is no ambient light.
			optional float gain = 2 [ (d_min) = 0, (d_max) = 0.5 ]; // The gain scales a non-linear function, which uses the ambient light level of the point the laser shoots at, as an input.
			optional bool enable = 3 [ default = true ]; // <blockquote>Introduced in BSL v2.17 and firmware v1.18</blockquote>	This flag can be used to disable the internal noise filter completely. By default, the noise filter is enabled.
		}

		optional uint32 max_number_of_returns_per_point = 1 [ default = 1, (d_min) = 1, (d_max) = 3 ]; // Set maximum number of returns per point. By default, secondary returns are disabled. Set this, e.g. to 2, to enable secondary returns.
		optional OptionalValueRange intensity = 2; // Filter all points, which intensity values are not within this value range.
		optional OptionalValueRange ambient_light_level = 3; // Filter all points, which ambient light level values are not within this value range.
		optional OptionalValueRange range = 4; // Filter all points, which range values are not within this value range.
		optional Noise noise = 5 [(optional) = true]; // <blockquote>Introduced in BSL v2.11 and firmware v1.11</blockquote> Refer to [Filter.Noise](#blickfeld.protocol.config.ScanPattern.Filter.Noise)

		/*
		 * <blockquote> Introduced in BSL v2.16 and firmware v1.17</blockquote>
		 *
		 * All points without any returns are filtered if this setting is true.
		 * With active algorithms, such as background subtraction, this can reduce the bandwidth significantly.
		 *
		 * Note:
		 * It is recommended to not estimate required network bandwidths when this setting is active.
		 * In scenarios, where from one frame to another, all points have returns (e.g. due to environmental changes),
		 * the peak bandwidths might increase significantly. This could result, in these scenarios, in frame losses.
		 */
		optional bool delete_points_without_returns = 6 [ default = false ];
	}

	optional Horizontal horizontal = 1; // Refer to [ScanPattern.Horizontal](#blickfeld.protocol.config.ScanPattern.Horizontal)
	optional Vertical vertical = 2; // Refer to [ScanPattern.Vertical](#blickfeld.protocol.config.ScanPattern.Vertical)
	optional Pulse pulse = 3; // Refer to [ScanPattern.Pulse](#blickfeld.protocol.config.ScanPattern.Pulse)
	optional FrameRate frame_rate = 4; // Refer to [ScanPattern.FrameRate](#blickfeld.protocol.config.ScanPattern.FrameRate)
	extensions 5; // Developer
	extensions 6; // Developer
	optional Filter filter = 7; // <blockquote>Introduced in BSL v2.11 and firmware v1.11</blockquote> Refer to [Filter](#blickfeld.protocol.config.ScanPattern.Filter)
	repeated Constraint constraints = 8;
}
