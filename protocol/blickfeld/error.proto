syntax = "proto2";

import "blickfeld/options.proto";
import "blickfeld/common.proto";

package blickfeld.protocol;

message Error {

	/**
	 * Unknown error. Please consult the Blickfeld support team for further information.
	 */
	message Unknown {
		option (e_desc) = "The server threw an unknown generic error. Description: {description:%s}";

		optional string description = 1;  // Description of the unknown error
	}

	/**
	 * The firmware on the device is not compatible with the BSL version. Update the device or downgrade the BSL.
	 */
	message NotImplemented {
		option (e_desc) = "The request is not implemented on the server side. Check the versions of the client and firmware software.";
	}

	/**
	 * The server sent an empty message.
	 */
	message Empty {
		option (e_desc) = "The server sent an empty message.";
	}

	/**
	 * The server failed to process the request.
	 */
	message ServerImplementation {
		option (e_desc) = "The implementation on the server failed to process the request.";
	}

	/**
	 * Validation of the sent request failed, please send a request with-in a valid range.
	 */
	message InvalidRequest {
		option (e_desc) = "The sent request did not pass the validation: {validation_error:%s}";

		optional string validation_error = 1; // Validation error string
		repeated Constraint constraints = 2; // <blockquote>Introduced in BSL v2.14 and firmware v1.14</blockquote> Contains list of failed constraints. The `validation_error` field contains a human-readable output of the constraint validation.
	}

	/**
	 * The server closed the connection.
	 */
	message ConnectionClosed {
		option (e_desc) = "The connection was closed by the server.";
	}

	/**
	 * The protocol of the client is too new. Please update the device.
	 */
	message OutdatedServerProtocol {
		option (e_desc) = "The protocol of the client is too new. Please update the device to {required_version:%u}.";

		optional uint32 required_version = 1;  // Version that is required
	}

	/**
	 * The protocol of the server is too new. Please update the client software.
	 */
	message OutdatedClientProtocol {
		option (e_desc) = "The protocol of the server is too new. Please update the client software to {required_version:%u}.";

		optional uint32 required_version = 1;  // Version that is required
	}

	/**
	 * The device is currently busy with another operation. Cancel it and try again.
	 */
	message ScannerBusy {
		option (e_desc) = "The device is currently busy with another operation. Cancel it and try again.";
	}

	/**
	 * The device is set to a different operation mode. Perhaps it is currently being used by another application.
	 * Change the operation mode and try again if no one else is using it.
	 */
	message WrongOperationMode {
		option (e_desc) = "The device is set to a different operation mode.Perhaps it is currently being used by another application.";
	}

	/**
	 * The requested operation is not allowed.
	 */
	message NotAllowed {
		option (e_desc) = "The requested operation is not allowed.";
	}

	/**
	 * The device is in an error state and cannot be operated. Attempt to power-cycle the device or use diagnostic software to read out the hardware state.
	 */
	message HardwareError {
		option (e_desc) = "The device is in an error state and cannot be operated. Attempt to power cycle the device or use diagnostic software to read-out the hardware state.";
	}

	/**
	 * The device stopped unexpectedly and can no longer be operated. Attempt to power cycle the device or use diagnostic software to read-out the hardware state.
	 */
	message SystemStop {
		option (e_desc) = "The device stopped unexpectedly and can no longer be operated. Attempt to power cycle the device or use diagnostic software to read-out the hardware state.";
	}

	/**
	 * The requested data is not available. Please check the request parameters.
	 */
	message NotFound {
		option (e_desc) = "The requested data is not available. Please check the request parameters.";
	}

	/**
	 * The time synchronization failed. The NTP daemon failed or timed out.
	 */
	message TimeSyncFailed {
		option (e_desc) = "The time synchronization failed. The NTP daemon failed or timed out. Log output:\n{ntp_daemon_log:%s}";

		optional string ntp_daemon_log = 1;  // Log of the NTP daemon
	}

	/**
	 * No device has been discovered. Check the network connection and power supply of the device. The 'discover' requests may have been blocked by a local or a network firewall.
	 */
	message NoDeviceDiscovered {
		option (e_desc) = "No device has been discovered. Check the network connection and power supply of the device. The 'discover' requests may have been blocked by a local or a network firewall.";
	}

	/**
	 * Unknown Error. Please contact the Blickfeld support team and make sure to use compatible BSL and FW versions.
	 */
	message UnknownErrorCode {
		option (e_desc) = "Unknown Error Code: {error_code:%u}";

		optional uint32 error_code = 1;  // Error code
	}

	/**
	 * The requested parameter is not within the valid range.
	 */
	message NotInRange {
		option (e_desc) = "The requested {parameter:%s} ({requested:%.2f}{unit:%s}) is not within the valid range. The {parameter:%s} has to be in the interval of {minimum:%.2f} < {maximum:%.2f}{unit:%s}.";
		optional string parameter = 1;          // The parameter, which was not in range
		optional float minimum = 2;          // Minimum value of the parameter
		optional float maximum = 3;          // Maximum value of the parameter
		optional float requested = 4;          // Requested value of the parameter
		optional string unit = 5 [default = ""];          // Unit of the parameter
	}

	oneof error {
		Unknown unknown = 1;  // Refer to [Unknown](#blickfeld.protocol.Error.Unknown)
		NotImplemented not_implemented = 2;  // Refer to [NotImplemented](#blickfeld.protocol.Error.NotImplemented)
		Empty empty = 3;  // Refer to [Empty](#blickfeld.protocol.Error.Empty)
		ServerImplementation server_implementation = 4;  // Refer to [ServerImplementation](#blickfeld.protocol.Error.ServerImplementation)
		InvalidRequest invalid_request = 5;  // Refer to [InvalidRequest](#blickfeld.protocol.Error.InvalidRequest)
		ConnectionClosed connection_closed = 6;  // Refer to [ConnectionClosed](#blickfeld.protocol.Error.ConnectionClosed)
		OutdatedServerProtocol outdated_server_protocol = 11;  // Refer to [OutdatedServerProtocol](#blickfeld.protocol.Error.OutdatedServerProtocol)
		OutdatedClientProtocol outdated_client_protocol = 12;  // Refer to [OutdatedClientProtocol](#blickfeld.protocol.Error.OutdatedClientProtocol)
		ScannerBusy scanner_busy = 13;  // Refer to [ScannerBusy](#blickfeld.protocol.Error.ScannerBusy)
		WrongOperationMode wrong_operation_mode = 14;  // Refer to [WrongOperationMode](#blickfeld.protocol.Error.WrongOperationMode)
		NotAllowed not_allowed = 15;  // Refer to [NotAllowed](#blickfeld.protocol.Error.NotAllowed)
		HardwareError hardware_error = 16;  // Refer to [HardwareError](#blickfeld.protocol.Error.HardwareError)
		SystemStop system_stop = 17;  // Refer to [SystemStop](#blickfeld.protocol.Error.SystemStop)
		NotFound not_found = 18;  // Refer to [NotFound](#blickfeld.protocol.Error.NotFound)
		UnknownErrorCode unknown_error_code = 21;  // Refer to [UnknownErrorCode](#blickfeld.protocol.Error.UnknownErrorCode)
		NotInRange not_in_range = 22;  // Refer to [NotInRange](#blickfeld.protocol.Error.NotInRange)
		TimeSyncFailed time_sync_failed = 23;  // Refer to [TimeSyncFailed](#blickfeld.protocol.Error.TimeSyncFailed)
		NoDeviceDiscovered no_device_discovered = 24;  // Refer to [NoDeviceDiscovered](#blickfeld.protocol.Error.NoDeviceDiscovered)
	}

	reserved 7 to 10, 19, 20;
}